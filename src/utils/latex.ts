import * as monaco from "monaco-editor";

export const LATEX_LANG: monaco.languages.IMonarchLanguage = {
  displayName: "Latex",
  name: "latex",
  mimeTypes: ["text/latex", "text/tex"],
  fileExtensions: ["tex", "sty", "cls"],

  lineComment: "% ",

  builtin: [
    "addcontentsline",
    "addtocontents",
    "addtocounter",
    "address",
    "addtolength",
    "addvspace",
    "alph",
    "appendix",
    "arabic",
    "author",
    "backslash",
    "baselineskip",
    "baselinestretch",
    "bf",
    "bibitem",
    "bigskipamount",
    "bigskip",
    "boldmath",
    "boldsymbol",
    "cal",
    "caption",
    "cdots",
    "centering",
    "chapter",
    "circle",
    "cite",
    "cleardoublepage",
    "clearpage",
    "cline",
    "closing",
    "color",
    "copyright",
    "dashbox",
    "date",
    "ddots",
    "documentclass",
    "dotfill",
    "em",
    "emph",
    "ensuremath",
    "epigraph",
    "euro",
    "fbox",
    "flushbottom",
    "fnsymbol",
    "footnote",
    "footnotemark",
    "footnotesize",
    "footnotetext",
    "frac",
    "frame",
    "framebox",
    "frenchspacing",
    "hfill",
    "hline",
    "href",
    "hrulefill",
    "hspace",
    "huge",
    "Huge",
    "hyphenation",
    "include",
    "includegraphics",
    "includeonly",
    "indent",
    "input",
    "it",
    "item",
    "kill",
    "label",
    "large",
    "Large",
    "LARGE",
    "LaTeX",
    "LaTeXe",
    "ldots",
    "left",
    "lefteqn",
    "line",
    "linebreak",
    "linethickness",
    "linewidth",
    "listoffigures",
    "listoftables",
    "location",
    "makebox",
    "maketitle",
    "markboth",
    "mathcal",
    "mathop",
    "mbox",
    "medskip",
    "multicolumn",
    "multiput",
    "newcommand",
    "newcolumntype",
    "newcounter",
    "newenvironment",
    "newfont",
    "newlength",
    "newline",
    "newpage",
    "newsavebox",
    "newtheorem",
    "nocite",
    "noindent",
    "nolinebreak",
    "nonfrenchspacing",
    "normalsize",
    "nopagebreak",
    "not",
    "onecolumn",
    "opening",
    "oval",
    "overbrace",
    "overline",
    "pagebreak",
    "pagenumbering",
    "pageref",
    "pagestyle",
    "par",
    "paragraph",
    "parbox",
    "parindent",
    "parskip",
    "part",
    "protect",
    "providecommand",
    "put",
    "raggedbottom",
    "raggedleft",
    "raggedright",
    "raisebox",
    "ref",
    "renewcommand",
    "right",
    "rm",
    "roman",
    "rule",
    "savebox",
    "sbox",
    "sc",
    "scriptsize",
    "section",
    "setcounter",
    "setlength",
    "settowidth",
    "sf",
    "shortstack",
    "signature",
    "sl",
    "slash",
    "small",
    "smallskip",
    "sout",
    "space",
    "sqrt",
    "stackrel",
    "stepcounter",
    "subparagraph",
    "subsection",
    "subsubsection",
    "tableofcontents",
    "telephone",
    "TeX",
    "textbf",
    "textcolor",
    "textit",
    "textmd",
    "textnormal",
    "textrm",
    "textsc",
    "textsf",
    "textsl",
    "texttt",
    "textup",
    "textwidth",
    "textheight",
    "thanks",
    "thispagestyle",
    "tiny",
    "title",
    "today",
    "tt",
    "twocolumn",
    "typeout",
    "typein",
    "uline",
    "underbrace",
    "underline",
    "unitlength",
    "usebox",
    "usecounter",
    "uwave",
    "value",
    "vbox",
    "vcenter",
    "vdots",
    "vector",
    "verb",
    "vfill",
    "vline",
    "vphantom",
    "vspace",

    "RequirePackage",
    "NeedsTeXFormat",
    "usepackage",
    "input",
    "include",
    "documentclass",
    "documentstyle",
    "def",
    "edef",
    "defcommand",
    "if",
    "ifdim",
    "ifnum",
    "ifx",
    "fi",
    "else",
    "begingroup",
    "endgroup",
    "definecolor",
    "textcolor",
    "color",
    "eifstrequal",
    "eeifstrequal",
  ],
  tokenizer: {
    root: [
      [
        "(\\\\begin)(\\s*)(\\{)([\\w\\-\\*\\@]+)(\\})",
        [
          "keyword.predefined",
          "white",
          "@brackets",
          { token: "tag.env-$4", bracket: "@open" },
          "@brackets",
        ],
      ],
      [
        "(\\\\end)(\\s*)(\\{)([\\w\\-\\*\\@]+)(\\})",
        [
          "keyword.predefined",
          "white",
          "@brackets",
          { token: "tag.env-$4", bracket: "@close" },
          "@brackets",
        ],
      ],
      ["\\\\[^a-zA-Z@]", "keyword"],
      ["\\@[a-zA-Z@]+", "keyword.at"],
      [
        "\\\\([a-zA-Z@]+)",
        {
          cases: {
            "$1@builtin": "keyword.predefined",
            "@default": "keyword",
          },
        },
      ],
      { include: "@whitespace" },
      ["[{}()\\[\\]]", "@brackets"],
      ["#+\\d", "number.arg"],
      [
        "\\-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)\\s*(?:em|ex|pt|pc|sp|cm|mm|in)",
        "number.len",
      ],
    ],

    whitespace: [
      ["[ \\t\\r\\n]+", "white"],
      ["%.*$", "comment"],
    ],
  },
};

export const LATEX_COMPLETIONS: monaco.languages.CompletionItemProvider = {
  triggerCharacters: ["\\", "$"],

  provideCompletionItems: (model, position, context) => {
    const lineNumber = position.lineNumber;
    const column = position.column;

    const startColumn = column - 1;

    const backslashSuggestions: monaco.languages.CompletionItem[] = [
      {
        label: "\\textbf",
        kind: monaco.languages.CompletionItemKind.Function,
        insertText: "\\textbf{${1:text}}",
        insertTextRules:
          monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
        documentation: "Bold text",
        range: {
          startLineNumber: lineNumber,
          endLineNumber: lineNumber,
          startColumn,
          endColumn: column,
        },
      },
      {
        label: "\\frac",
        kind: monaco.languages.CompletionItemKind.Function,
        insertText: "\\frac{${1:numerator}}{${2:denominator}}",
        insertTextRules:
          monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
        documentation: "Fraction",
        range: {
          startLineNumber: lineNumber,
          endLineNumber: lineNumber,
          startColumn,
          endColumn: column,
        },
      },
      {
        label: "\\sqrt",
        kind: monaco.languages.CompletionItemKind.Function,
        insertText: "\\sqrt{${1:expression}}",
        insertTextRules:
          monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
        documentation: "Square root",
        range: {
          startLineNumber: lineNumber,
          endLineNumber: lineNumber,
          startColumn,
          endColumn: column,
        },
      },
    ];

    const dollarSuggestions: monaco.languages.CompletionItem[] = [
      {
        label: "$$",
        kind: monaco.languages.CompletionItemKind.Function,
        insertText: "$${1:equation}$$",
        insertTextRules:
          monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
        documentation: "Display math mode",
        range: {
          startLineNumber: lineNumber,
          endLineNumber: lineNumber,
          startColumn: startColumn + 1,
          endColumn: column,
        },
      },
    ];

    const trigger = context?.triggerCharacter;

    return {
      suggestions:
        trigger === "\\"
          ? backslashSuggestions
          : trigger === "$"
            ? dollarSuggestions
            : [],
    };
  },
};
